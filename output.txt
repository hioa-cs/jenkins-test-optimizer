TEST DATA COLLECTED FROM FILE and Stored in List
['A,1,0.1,', 'B,2,0.2,A', 'C,4,0.9,B', 'D,3,0.1,B']
======== STARTS COMPUTING PRE-TESTS =======
pre_list
['']
tname in pre_testsA
Finding all dependencies for A
No known dependencies for A, skipping
['']
storing  as a dependency for A
pre_list
['A']
tname in pre_testsB
Finding all dependencies for B
['A']
storing A as a dependency for B
pre_list
['']
Finding all unknown dependencies for B from A
No known dependencies for A, skipping
pre_list
['B']
tname in pre_testsC
Finding all dependencies for C
['B']
storing B as a dependency for C
pre_list
['A']
Finding all unknown dependencies for C from B
storing A as a dependencie for C
pre_list
['']
Finding all unknown dependencies for C from A
No known dependencies for A, skipping
pre_list
['B']
tname in pre_testsD
Finding all dependencies for D
['B']
storing B as a dependency for D
pre_list
['A']
Finding all unknown dependencies for D from B
storing A as a dependencie for D
pre_list
['']
Finding all unknown dependencies for D from A
No known dependencies for A, skipping
pre_tests:
{'A': [''], 'C': ['B', 'A'], 'B': ['A'], 'D': ['B', 'A']}
======== STARTS COMPUTING SUB TESTS =======
A
['']
No known pre test for A, skipping
C
['B', 'A']
tname B
tname in compute sub_tests B
storing C as a subtest for B
{'B': ['C']}
tname A
tname in compute sub_tests A
storing C as a subtest for A
{'A': ['C'], 'B': ['C']}
B
['A']
tname A
tname in compute sub_tests A
storing B as a subtest for A
{'A': ['C', 'B'], 'B': ['C']}
storing B as a subtest for A in get_subtest
storing B as a subtest for A in get_subtest
D
['B', 'A']
tname B
tname in compute sub_tests B
storing D as a subtest for B
{'A': ['C', 'B', 'D'], 'B': ['C', 'D']}
tname A
tname in compute sub_tests A
storing D as a subtest for A
{'A': ['C', 'B', 'D'], 'B': ['C', 'D']}
sub_tests:
{'A': ['C', 'B', 'D'], 'C': [], 'B': ['C', 'D'], 'D': []}
 ====== ***** Running Reorder Algorithm ***** ======
['A', '1', '0.1', '']
1
A,1,0.1,
['A', '1', '0.1', '']
1
B,2,0.2,A
['B', '2', '0.2', 'A']
2
xpos < ypos
sub_tests testname : 
['C', 'B', 'D']
=== Finding MIN position for dependency list ===
['C', 'B', 'D']
5
C
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
test position: 4
5
4
['D', '3', '0.1', 'B']
B
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
test position: 2
4
2
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
D
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
test position: 3
2
Min postion for list: 
2
=== Finding MAX position for dependency list ===
['A']
test position: 1
1
Max position for list: 
1
print max and min
2
1
C,4,0.9,B
['C', '4', '0.9', 'B']
4
xpos < ypos
sub_tests testname : 
['C', 'B', 'D']
=== Finding MIN position for dependency list ===
['C', 'B', 'D']
5
C
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
test position: 4
5
4
['D', '3', '0.1', 'B']
B
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
test position: 2
4
2
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
D
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
test position: 3
2
Min postion for list: 
2
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
2
2
D,3,0.1,B
['D', '3', '0.1', 'B']
3
xpos < ypos
sub_tests testname : 
['C', 'B', 'D']
=== Finding MIN position for dependency list ===
['C', 'B', 'D']
5
C
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
test position: 4
5
4
['D', '3', '0.1', 'B']
B
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
test position: 2
4
2
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
D
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
test position: 3
2
Min postion for list: 
2
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
2
2
['B', '2', '0.2', 'A']
2
A,1,0.1,
['A', '1', '0.1', '']
1
xpos > ypos
sub_tests test name : 
['C', 'D']
=== Finding MIN position for dependency list ===
['C', 'D']
5
C
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
test position: 4
5
4
['D', '3', '0.1', 'B']
D
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
test position: 3
4
3
Min postion for list: 
3
=== Finding MAX position for dependency list ===
['A']
test position: 1
1
Max position for list: 
1
print max and min
3
1
B,2,0.2,A
['B', '2', '0.2', 'A']
2
C,4,0.9,B
['C', '4', '0.9', 'B']
4
xpos < ypos
sub_tests testname : 
['C', 'D']
=== Finding MIN position for dependency list ===
['C', 'D']
5
C
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
test position: 4
5
4
['D', '3', '0.1', 'B']
D
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
test position: 3
4
3
Min postion for list: 
3
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
3
2
D,3,0.1,B
['D', '3', '0.1', 'B']
3
xpos < ypos
sub_tests testname : 
['C', 'D']
=== Finding MIN position for dependency list ===
['C', 'D']
5
C
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
test position: 4
5
4
['D', '3', '0.1', 'B']
D
['A', '1', '0.1', '']
['B', '2', '0.2', 'A']
['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
test position: 3
4
3
Min postion for list: 
3
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
3
2
['C', '4', '0.9', 'B']
4
A,1,0.1,
['A', '1', '0.1', '']
1
xpos > ypos
sub_tests test name : 
[]
=== Finding MIN position for dependency list ===
[]
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
5
2
B,2,0.2,A
['B', '2', '0.2', 'A']
2
xpos > ypos
sub_tests test name : 
[]
=== Finding MIN position for dependency list ===
[]
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
5
2
C,4,0.9,B
['C', '4', '0.9', 'B']
4
D,3,0.1,B
['D', '3', '0.1', 'B']
3
xpos > ypos
sub_tests test name : 
[]
=== Finding MIN position for dependency list ===
[]
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
5
2
Comparing positions of tests for swapping
delta new 
0.8
DELTA MAX = 
0.8
Swapping is Valid, therefore SWAPPING tests:
['C', '4', '0.9', 'B'] ['D', '3', '0.1', 'B']
SWAP
['D', '3', '0.1', 'B'] ['C', '4', '0.9', 'B']
['D', '3', '0.1', 'B']
3
A,1,0.1,
['A', '1', '0.1', '']
1
xpos > ypos
sub_tests test name : 
[]
=== Finding MIN position for dependency list ===
[]
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
5
2
B,2,0.2,A
['B', '2', '0.2', 'A']
2
xpos > ypos
sub_tests test name : 
[]
=== Finding MIN position for dependency list ===
[]
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
5
2
C,4,0.9,B
['C', '4', '0.9', 'B']
4
xpos < ypos
sub_tests testname : 
[]
=== Finding MIN position for dependency list ===
[]
=== Finding MAX position for dependency list ===
['B', 'A']
test position: 2
2
test position: 1
Max position for list: 
2
print max and min
5
2
Comparing positions of tests for swapping
delta new 
0.8
DELTA MAX = 
0.8
D,3,0.1,B
['D', '3', '0.1', 'B']
3
Swapping is Valid, therefore SWAPPING tests:
['D', '3', '0.1', 'B'] ['C', '4', '0.9', 'B']
SWAP
['C', '4', '0.9', 'B'] ['D', '3', '0.1', 'B']
 ====== Finished Running Reorder Algorithm ======
 ====== Returning delta_max ======
0.8
['A,1,0.1,', 'B,2,0.2,A', 'C,4,0.9,B', 'D,3,0.1,B']
